{"version":3,"sources":["components/genres.js","components/movie.js","components/search.js","components/nav.js","components/MovieList.js","components/castList.js","components/movieDetails.js","App.js","serviceWorker.js","index.js"],"names":["Genre","props","state","name","fetch","this","genreID","then","res","json","data","setState","className","React","Component","Movie","Data","style","width","to","id","src","poster_path","alt","title","release_date","genre_ids","map","g","i","key","rating","vote_average","starRatedColor","numberOfStars","starSpacing","starDimension","Search","searchData","Fragment","type","class","autoFocus","placeholder","onInput","e","target","value","onClick","onSearch","Nav","query","MovieList","movieData","results","m","searchResult","marginTop","CastList","swiper","movieId","castId","console","log","JSON","stringify","params","slidesPerView","centeredSlides","el","clickable","nextEl","prevEl","castName","cast","profile_path","color","character","MovieDetails","movie","match","movieID","backgroundImage","backdrop_path","backgroundColor","left","top","history","go","boxShadow","borderRadius","display","justifyContent","paddingBottom","vote_count","popularity","original_language","adult","original_title","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.302b546f.chunk.js","sourcesContent":["import React from 'react'\nclass Genre extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      name: ''\n    }\n  }\n  componentDidMount() {\n    fetch(`https://api.themoviedb.org/3/genre/${this.props.genreID}?api_key=17ce301be4e248433e79e555fb543fb8`)\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          name: data.name\n        })\n      })\n  }\n  render() {\n    return (\n\n      <span className=\"badge badge-pill badge-success\">\n        {this.state.name}\n      </span>\n\n    )\n  }\n}\n\nexport default Genre","import React from 'react';\nimport Genre from './genres';\nimport StarRatings from 'react-star-ratings';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom';\nclass Movie extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    let data = this.props.Data\n    return (\n      <div className=\"col-md-3 mb-3\">\n        <div className=\"card mycard\" style={{ width: '18rem' }}>\n          <div className=\"card-header\">\n            <Link to={`/${data.id}`}>\n              <img src={`https://image.tmdb.org/t/p/w500${data.poster_path}`}\n                className=\"card-img-top\" alt=\"...\" />\n            </Link>\n          </div>\n          <div className=\"card-body\">\n            <h6 className=\"card-title\">{data.title}</h6>\n            <p>{data.release_date}</p>\n            <div className=\"cardGenre\"> {data.genre_ids.map((g, i) => <Genre genreID={g} key={i}></Genre>)}</div>\n            <StarRatings\n              rating={data.vote_average}\n              starRatedColor=\"green\"\n              numberOfStars={10}\n              starSpacing='2px'\n              starDimension=\"18px\"\n              name='rating'\n            />\n          </div>\n        </div>\n      </div>\n    )\n\n  }\n}\n\nexport default Movie","import React from 'react'\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      searchData: ''\n    }\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <input type=\"text\"\n          class=\"form-control\"\n          autoFocus\n          placeholder=\"Search...\"\n          onInput={e => this.setState({ searchData: e.target.value })} />\n        <span class=\"input-group-append\">\n          <button\n            class=\"btn btn-outline-secondary btn-success\"\n            type=\"button\"\n            onClick={e => this.props.onSearch(e, this.state.searchData)}\n          >GO</button>\n        </span>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Search","import React from 'react';\nimport Search from './search'\n\nclass Nav extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      searchData: ''\n    }\n  }\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-sm bg-dark navbar-dark fixed-top\">\n\n        <form class=\"mx-2 my-auto d-inline w-100\">\n          <div class=\"input-group\">\n            <Search onSearch={(e, query) => this.props.onSearch(e, query)}></Search>\n          </div>\n        </form>\n      </nav>\n\n    )\n  }\n}\nexport default Nav;","import React, { Component } from 'react';\nimport Movie from './movie';\nimport Nav from './nav';\n\nclass MovieList extends Component {\n  constructor() {\n    super()\n    this.state = {\n      movieData: []\n    }\n  }\n  componentDidMount() {\n    fetch('https://api.themoviedb.org/3/discover/movie?api_key=17ce301be4e248433e79e555fb543fb8')\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          movieData: data.results\n        })\n      })\n  }\n\n  searchResult(query) {\n    fetch(`https://api.themoviedb.org/3/search/movie?api_key=17ce301be4e248433e79e555fb543fb8&query=${query}`)\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          movieData: data.results\n        })\n      })\n  }\n\n  render() {\n    const movieData = this.state.movieData.map((m, i) => {\n      return <Movie\n        Data={m}>\n      </Movie>\n    })\n    return (\n      <div className=\"p-3\">\n        <Nav onSearch={(e, query) => this.searchResult(query)}></Nav>\n        <div className=\"row\" style={{ marginTop: '70px' }}>\n          {movieData}\n        </div>\n      </div>\n    );\n  }\n}\nexport default MovieList;","import React, {\n  Component\n} from 'react';\nimport '../App.css';\n\nimport Swiper from 'react-id-swiper';\n\nexport default class CastList extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      swiper: null\n    }\n  }\n\n  componentDidMount() {\n    let movieId = this.props.castId;\n    fetch(`https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=17ce301be4e248433e79e555fb543fb8`)\n      .then(res => res.json())\n      .then(data => {\n        console.log(\"swiper \" + JSON.stringify(data))\n        this.setState({\n          swiper: data\n        })\n      })\n  }\n\n  render() {\n    const params = {\n      slidesPerView: 5,\n      centeredSlides: true,\n      centeredSlides: true,\n      pagination: {\n        el: '.swiper-pagination',\n        type: 'bullets',\n        clickable: true\n      },\n      navigation: {\n        nextEl: '.swiper-button-next',\n        prevEl: '.swiper-button-prev'\n      },\n\n    }\n    let data = this.state.swiper\n    if (data == null) return null\n\n    const castName = data.cast.map(cast => {\n      return <div className=\"mb-3\">\n        <div className=\"card\" style={{ width: '18rem' }}>\n          <div className=\"card-header\">\n            <img src={`https://image.tmdb.org/t/p/w200${cast.profile_path}`}></img>\n          </div>\n          <div className=\"card-body\" style={{ color: 'black' }}>\n            <h5 className=\"card-title\">{cast.name}</h5>\n            <p className=\"card-text\">{cast.character}</p>\n          </div>\n        </div>\n      </div>\n    })\n\n    return (\n      <Swiper {...params}>\n        {castName}\n      </Swiper>\n    );\n  }\n}","import React, {\n  Component\n} from 'react';\nimport '../App.css';\nimport { Router } from 'react-router-dom'\nimport StarRatings from 'react-star-ratings';\nimport CastList from './castList';\n\n\nexport default class MovieDetails extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      movie: null\n    }\n  }\n\n  componentDidMount() {\n    let movieId = this.props.match.params.movieID;\n    fetch(`https://api.themoviedb.org/3/movie/${movieId}?api_key=17ce301be4e248433e79e555fb543fb8`)\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          movie: data\n        })\n      })\n  }\n\n  render() {\n    let data = this.state.movie\n    if (data == null) return null\n\n    return (\n      <div className=\"container-fluid movieBg\"\n        style={{\n          color: 'white',\n          backgroundImage: `url(https://image.tmdb.org/t/p/w500${data.backdrop_path})`,\n\n        }}\n      >\n        <div className=\"container-fluid\" style={{ backgroundColor: 'rgba(0,0,0,0.4)' }}>\n          <button type=\"button\" class=\"btn btn-secondary fixed-top\" style={{ left: '15px', top: '15px' }}\n            onClick={() => this.props.history.go(-1)}>Back</button>\n          <div className=\"row\">\n            <div className=\"col-sm-4\">\n              <img src={`https://image.tmdb.org/t/p/w300${data.poster_path}`}\n                style={{\n                  boxShadow: '0px 0px 16px #505054',\n                  borderRadius: '10px'\n                }}></img>\n            </div>\n            <div className=\"col-sm-8 text-left\">\n              <h1>{data.title}</h1>\n              <StarRatings\n                rating={data.vote_average}\n                starRatedColor=\"#16de23\"\n                numberOfStars={10}\n                starSpacing='5px'\n                starDimension=\"30px\"\n                name='rating'\n              />\n              <span style={{\n                display: 'flex',\n                justifyContent: 'space-evenly',\n                paddingBottom: '19px',\n                marginTop: '25px'\n              }}>\n                <button type=\"button\" className=\"btn btn-primary buttons\">\n                  <div>Vote Count</div>\n                  <span>{data.vote_count}</span>\n                </button>\n                <button type=\"button\" className=\"btn btn-success buttons\">\n                  <div>Popularity</div>\n                  <span>{data.popularity}</span>\n                </button>\n                <button type=\"button\" className=\"btn btn-danger buttons\">\n                  <div>Language</div>\n                  <span>{data.original_language}</span>\n                </button>\n                <button type=\"button\" className=\"btn btn-warning buttons\">\n                  <div>adult</div>\n                  <span>{data.adult == false ? 'No' : 'Yes'}</span>\n                </button>\n              </span>\n              {/* {data.original_title}{data.original_language} */}\n              <div className=\"mt-3 movieDesc\">\n                <span className=\"d-flex\" style={{ justifyContent: 'space-evenly' }}>\n                  <span>Title</span>\n                  <span>{data.title}</span>\n                </span>\n\n                <span className=\"d-flex\" style={{ justifyContent: 'space-evenly' }}>\n                  <span>Original Title</span>\n                  <span>{data.original_title}</span>\n                </span>\n\n                <span className=\"d-flex\" style={{ justifyContent: 'space-evenly' }}>\n                  <span>Language</span>\n                  <span>{data.original_language}</span>\n                </span>\n              </div>\n\n\n\n            </div>\n          </div>\n\n          <div className=\"row mt-3\">\n            <CastList castId={data.id}></CastList>\n          </div>\n        </div>\n\n      </div >\n    );\n  }\n}","import React from 'react';\nimport MovieList from './components/MovieList';\nimport { Route, Switch, BrowserRouter as Router } from 'react-router-dom'\nimport MovieDetails from './components/movieDetails'\n\nimport './App.css';\n\nclass App extends React.Component {\n\n  render() {\n\n\n    return (\n      <Router>\n        <div className=\"App container-fluid p-0\">\n          <Switch>\n            <Route exact path=\"/\" component={MovieList} />\n            <Route path=\"/:movieID\" component={MovieDetails} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}