{"version":3,"sources":["components/Genre.js","components/MovieCard.js","components/Search.js","components/Navigation.js","components/MovieList.js","components/Home.js","components/Details.js","components/CastList.js","components/movieDetails.js","App.js","serviceWorker.js","index.js"],"names":["Genre","state","genreName","fetch","this","props","genreID","then","res","json","data","setState","name","color","i","Math","floor","random","className","style","backgroundColor","getRandomColor","Component","MovieCard","isActive","localStorage","getItem","retrivedArray","split","indexOf","String","Data","id","prevState","movieId","favArray","setItem","index","splice","push","activeClass","key","vote_average","onClick","checkFav","to","backgroundImage","poster_path","title","Search","searchData","e","val","onSearch","Fragment","type","placeholder","aria-label","onInput","target","value","onKeyDown","keyPress","Navigation","query","cursor","MovieList","movieData","pageNo","queryVal","loadmoreClick","loadMovies","url","trim","results","storeMovies","sort","a","b","localeCompare","map","movie","searchResult","dataLength","length","next","hasMore","scrollThreshold","loader","margin","display","Home","Details","Detail","fontFamily","fontSize","rating","starRatedColor","numberOfStars","starSpacing","starDimension","original_language","overview","status","release_date","genres","g","CastList","swiper","castId","console","log","castName","cast","filter","profile_path","character","slidesPerView","setWrapperSize","spaceBetween","autoplay","delay","breakpoints","1024","767","320","navigation","nextEl","prevEl","MovieDetails","movieInfo","match","params","backdrop_path","paddingTop","src","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fc42a523.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class Genre extends Component {\n\n  state = {\n    genreName: ''\n  }\n\n  componentDidMount() {\n    fetch(`https://api.themoviedb.org/3/genre/${this.props.genreID}?api_key=17ce301be4e248433e79e555fb543fb8`)\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          genreName: data.name\n        })\n      })\n  }\n\n  getRandomColor() {\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n\n  render() {\n    return (\n      <div>\n        <span className=\"badge badge-pill badge-success\" style={{ backgroundColor: this.getRandomColor() }}>\n          {this.state.genreName}\n        </span>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { IoMdHeart } from \"react-icons/io\";\nimport Genre from './Genre';\n\nexport default class MovieCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isActive: false,\n    }\n  }\n  componentDidMount() {\n    if (localStorage.getItem('favorites') != null) {\n      let retrivedArray = localStorage.getItem('favorites').split(',');\n      this.setState({\n        isActive: retrivedArray.indexOf(String(this.props.Data.id)) > -1\n      })\n    }\n  }\n\n  checkFav() {\n    this.setState((prevState) => {\n      return { isActive: !prevState.isActive }\n    })\n    let movieId = String(this.props.Data.id);\n\n    let favArray = localStorage.getItem('favorites');\n    if (favArray == null) {\n      localStorage.setItem('favorites', [movieId]);\n    } else {\n      favArray = favArray.split(\",\");\n      let index = favArray.indexOf(movieId);\n      if (index > -1) {\n        favArray.splice(index, 1);\n      } else {\n        favArray.push(movieId)\n      }\n      localStorage.setItem('favorites', favArray);\n    }\n  }\n  render() {\n    let data = this.props.Data;\n    let activeClass = (this.state.isActive ? 'active' : 'favorite');\n    return (\n      <div className=\"col-sm-3 mb-3\" key={data.id}>\n        <span className=\"badge badge-warning\">{data.vote_average}</span>\n        <IoMdHeart className={`${activeClass}`} onClick={() => this.checkFav()} />\n        <Link to={`/${data.id}`}>\n          <div className=\"card card-container\">\n            <div className=\"card-header cardImg\"\n              style={{ backgroundImage: `url(https://image.tmdb.org/t/p/w500${data.poster_path})` }}>\n            </div>\n            <div className=\"card-body card-body-container\">\n              <p className=\"card-text\">{data.title}</p>\n            </div>\n          </div>\n        </Link>\n\n      </div>\n\n    );\n  }\n}","import React, { Component } from 'react';\n\nexport default class Search extends Component {\n  state = {\n    searchData: ''\n  }\n  keyPress(e, val) {\n    if (e.key === 'Enter') {\n      this.props.onSearch(val);\n    }\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <input className=\"form-control searchInput\"\n          type=\"text\"\n          placeholder=\"Search\"\n          aria-label=\"Search\"\n          onInput={(e) => this.setState({ searchData: e.target.value })}\n          onKeyDown={(e) => this.keyPress(e, this.state.searchData)}\n        />\n      </React.Fragment>\n    );\n  }\n}","import React, { Component } from 'react';\nimport { IoMdHeart } from \"react-icons/io\";\n\nimport Search from './Search';\n\nexport default class Navigation extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\" style={{ color: 'white' }}>\n          <div className=\"active-grey-3 active-grey-4 mb-4 pt-3 col-sm-8\">\n            <Search onSearch={(query) => this.props.onSearch(query)} />\n          </div>\n          <div className=\"col-sm-3 mt-3 ml-3\" style={{ cursor: 'pointer' }}>\n            <IoMdHeart className=\"favTitle\" /><h3><a>Favorite Films</a></h3>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport MovieCard from './MovieCard';\nimport Navigation from './Navigation';\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nexport default class MovieList extends Component {\n  state = {\n    movieData: [],\n    pageNo: 1,\n    queryVal: ''\n  }\n  componentDidMount() {\n    this.loadMovies();\n  }\n\n  loadmoreClick = () => {\n    this.setState(prevState => {\n      return {\n        pageNo: prevState.pageNo + 1\n      }\n    }, () => this.loadMovies());\n  }\n\n  loadMovies = () => {\n    debugger;\n    let url = `https://api.themoviedb.org/3/discover/movie?api_key=17ce301be4e248433e79e555fb543fb8&page=${this.state.pageNo}`;\n\n    if (this.state.queryVal.trim() != '') {\n      url += `&query=${this.state.queryVal}`;\n    }\n    fetch(url)\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          movieData: [...this.state.movieData, ...data.results]\n        })\n      })\n  }\n\n  searchResult(query) {\n    this.setState({\n      queryVal: query\n    })\n    fetch(`https://api.themoviedb.org/3/search/movie?api_key=17ce301be4e248433e79e555fb543fb8&query=${query}`)\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          movieData: data.results\n        })\n      })\n  }\n\n  render() {\n    let storeMovies = this.state.movieData\n      .sort((a, b) => a.title.localeCompare(b.title))\n      .map(movie => {\n        return (\n          <MovieCard Data={movie} key={movie.id} />\n        )\n      })\n    return (\n      <div>\n        <Navigation onSearch={(query) => this.searchResult(query)} />\n        <div className=\"container pt-3\">\n          <InfiniteScroll\n            dataLength={this.state.movieData.length}\n            next={this.loadmoreClick}\n            hasMore={true}\n            scrollThreshold={0.99}\n            loader={\n              <div className=\"text-center\" style={{ margin: '0 auto', display: 'block' }}>\n                <div className=\"spinner-grow text-warning\"></div>\n                <div className=\"spinner-grow text-danger\"></div>\n                <div className=\"spinner-grow text-info\"></div>\n              </div>\n            }\n          >\n            <div className=\"row pt-3\">\n              {storeMovies}\n            </div>\n          </InfiniteScroll>\n          {/* <button type=\"button\" className=\"btn btn-warning\" onClick={() => this.loadmoreClick()}>Loadmore</button> */}\n        </div>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport MovieList from './MovieList';\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <div>\n        <MovieList />\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport StarRatings from 'react-star-ratings';\n\nimport Genre from './Genre';\nexport default class Details extends Component {\n  render() {\n    let data = this.props.Detail;\n    return (\n      <React.Fragment>\n        <div style={{ color: 'white', fontFamily: 'serif' }}>\n          <div style={{ fontSize: '30px' }}>\n            <span><i>{data.title}</i></span>\n          </div>\n\n          <StarRatings\n            rating={data.vote_average}\n            starRatedColor=\"yellow\"\n            numberOfStars={10}\n            starSpacing='2px'\n            starDimension=\"25px\"\n            name='rating' />\n\n          <h4>{data.vote_average}</h4>\n          <div className=\"mt-3\">\n            <h5>{data.original_language == 'en' ? 'English' : ''}</h5>\n            <h5><p>{data.overview}</p></h5>\n            <h5>{data.status} on date   {data.release_date}</h5>\n            <div className=\"cardGenre text-left\">\n              {data.genres.map((g, i) => <Genre genreID={g.id} key={i}></Genre>)}\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}","import React, { Component } from 'react';\nimport Swiper from 'react-id-swiper';\n\nexport default class CastList extends Component {\n\n  state = {\n    swiper: null\n  }\n  componentDidMount() {\n    let movieId = this.props.castId;\n    fetch(`https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=17ce301be4e248433e79e555fb543fb8`)\n      .then(res => res.json())\n      .then(data => {\n        console.log(data);\n        this.setState({\n          swiper: data\n        })\n      })\n  }\n  render() {\n    const params = {\n      slidesPerView: 6,\n      setWrapperSize: true,\n      spaceBetween: 10,\n      autoplay: {\n        delay: 2000,\n      },\n      breakpoints: {\n        1024: {\n          slidesPerView: 6\n        },\n        767: {\n          slidesPerView: 2\n        },\n        320: {\n          slidesPerView: 1\n        }\n      },\n      navigation: {\n        nextEl: '.swiper-button-next',\n        prevEl: '.swiper-button-prev'\n      },\n    }\n    let data = this.state.swiper\n    if (data == null) return null\n    let castName = data.cast.filter(cast => cast.profile_path != null).map(cast => {\n      return (\n        <div className=\"card swiper_card\" key={cast.id}>\n          <div className=\"card-header swiperImg\"\n            style={{ backgroundImage: `url(https://image.tmdb.org/t/p/w200${cast.profile_path})` }}>\n          </div>\n          <div className=\"card-body swiperBody\">\n            <span className=\"card-title\">{cast.name} ({cast.character})</span>\n          </div>\n        </div>\n      )\n    })\n\n    return (\n      <Swiper {...params}>\n        {castName}\n      </Swiper>\n    );\n  }\n}","import React, { Component } from 'react';\nimport Details from './Details';\nimport CastList from './CastList';\nexport default class MovieDetails extends Component {\n\n  state = {\n    movieInfo: null\n  }\n\n  componentDidMount() {\n    let movieId = this.props.match.params.id;\n    fetch(`https://api.themoviedb.org/3/movie/${movieId}?api_key=17ce301be4e248433e79e555fb543fb8`)\n      .then(res => res.json())\n      .then(data => {\n        console.log(data)\n        this.setState({\n          movieInfo: data\n        })\n      })\n  }\n\n  render() {\n    let data = this.state.movieInfo\n    if (data == null) return null\n    return (\n      <div className=\"contanier-fluid movieInfoCard\"\n        style={{ backgroundImage: `url(https://image.tmdb.org/t/p/w500${data.backdrop_path})`, paddingTop: '36px' }}>\n        <div className=\"infoBg\">\n          <div className=\"row\">\n            <div className=\"col-sm-4 pt-3 pb-3\">\n              <img className=\"detailImg\" src={`https://image.tmdb.org/t/p/w300${data.poster_path}`} />\n            </div>\n            <div className=\"col-sm-8 mt-3\">\n              <Details Detail={data} />\n            </div>\n\n          </div>\n          <CastList castId={data.id} />\n        </div>\n      </div >\n    );\n  }\n}","import React from 'react';\nimport './App.css';\nimport Home from './components/Home';\nimport { Route, Switch, BrowserRouter as Router } from 'react-router-dom'\nimport { black } from 'ansi-colors';\nimport MovieDetails from './components/movieDetails';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App mainBg\" style={{ backgroundColor: \"black\" }}>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/:id\" component={MovieDetails} />\n\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}